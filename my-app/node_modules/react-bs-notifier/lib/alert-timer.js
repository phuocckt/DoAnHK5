"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PropTypes = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = require("prop-types");
var _alert = _interopRequireDefault(require("./alert"));
var _container = require("./container");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
class AlertTimer extends _react.Component {
  constructor(props) {
    super(props);
  }
  componentDidMount() {
    this.setupTimer(this.props.timeout, this.props.onDismiss);
  }
  componentDidUpdate(prevProps) {
    if (this.props.timeout != prevProps.timeout || this.props.onDismiss != prevProps.onDismiss) {
      this.setupTimer(this.props.timeout, this.props.onDismiss);
    }
  }
  componentWillUnmount() {
    // need to clean up after ourselves
    this.setupTimer( /* passing nothing will clear the timer */);
  }
  setupTimer(timeout, onDismiss) {
    if (!timeout || !onDismiss) {
      // clear any timer we currently have
      clearTimeout(this.timer);
      this.timer = null;
      this.timerTimeout = null;
    } else {
      if (this.timer && this.timerTimeout != timeout) {
        // the timeout value has changed, setup a new timer
        clearTimeout(this.timer);
        this.timer = null;
      }

      // add new timer if we don't already have one
      if (!this.timer) {
        this.timer = setTimeout(this.dismissAlert.bind(this, onDismiss), timeout + _container.ENTER_TIMEOUT + _container.EXIT_TIMEOUT);
        this.timerTimeout = timeout;
      }
    }
  }
  dismissAlert(onDismiss) {
    // clear the timer if it hasn't fired yet
    clearTimeout(this.timer);

    // we don't need to keep track of any timers for this alert anymore
    this.timer = null;
    this.timerTimeout = null;

    // actually dismiss the alert
    onDismiss();
  }
  render() {
    const onDismiss = this.props.onDismiss ? this.dismissAlert.bind(this, this.props.onDismiss) : null;
    return /*#__PURE__*/_react.default.createElement(_alert.default, _extends({}, this.props, {
      onDismiss: onDismiss
    }));
  }
}
exports.default = AlertTimer;
const PropTypes = {
  type: (0, _propTypes.oneOf)(["info", "success", "warning", "danger"]),
  headline: _propTypes.string,
  onDismiss: _propTypes.func,
  dismissTitle: _propTypes.string,
  showIcon: _propTypes.bool,
  timeout: _propTypes.number
};
exports.PropTypes = PropTypes;
AlertTimer.propTypes = PropTypes;