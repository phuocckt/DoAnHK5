function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React from "react";
import { TransitionGroup } from "react-transition-group";
import { any, arrayOf, func, node, object, oneOfType, shape, string } from "prop-types";
import Container, { PropTypes as ContainerPropTypes, useStyles } from "./container";
import Alert, { PropTypes as AlertPropTypes } from "./alert-timer";
import AlertTransition from "./alert-transition";
const AlertList = _ref => {
  let {
    position,
    alerts,
    onDismiss,
    ...props
  } = _ref;
  const classes = useStyles();
  return /*#__PURE__*/React.createElement(Container, {
    position: position,
    className: classes.container
  }, /*#__PURE__*/React.createElement(TransitionGroup, null, alerts.map(item => {
    const dismiss = onDismiss ? () => onDismiss(item) : null;
    const {
      message,
      ...alertProps
    } = item;
    return /*#__PURE__*/React.createElement(AlertTransition, {
      key: item.id
    }, /*#__PURE__*/React.createElement(Alert, _extends({}, props, alertProps, {
      onDismiss: dismiss
    }), message));
  })));
};
const {
  timeout,
  type,
  headline
} = AlertPropTypes;
AlertList.propTypes = {
  ...ContainerPropTypes,
  alerts: arrayOf(shape({
    id: any.isRequired,
    type,
    headline,
    message: oneOfType([string, node, object]).isRequired
  })).isRequired,
  onDismiss: func,
  timeout
};
export default AlertList;